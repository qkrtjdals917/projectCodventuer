<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lec.spring.domain.board.BoardDAO">

	<!-- 공지사항 리스트 -->
	<select id="selectNotice" resultType="com.lec.spring.domain.board.BoardDTO">
		SELECT mb.board_uid board_uid, mb.subject subject,
		mm.nickname nickname, mb.regDate regDate, mb.count count
		FROM mc_board mb , mc_member mm
		WHERE mb.member_uid = mm.member_uid
		AND mb.type = "공지"
		ORDER BY board_uid DESC
	</select>
	
	<!-- 글 선택, 보기에서 활용 -->
	<select id="selectOne" resultType="com.lec.spring.domain.board.BoardDTO">
		SELECT mb.board_uid board_uid, mb.subject subject, mm.nickname nickname,
		mb.regDate regDate, mb.count count, mb.content content,
		mb.type type, mb.tag tag, (SELECT count(member_uid) FROM mc_like WHERE board_uid=#{board_uid}) likeCnt,
		mb.member_uid member_uid
		FROM mc_board mb , mc_member mm
		WHERE mb.member_uid = mm.member_uid
		AND mb.board_uid = #{board_uid}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="viewCnt" flushCache="true">
		UPDATE mc_board SET count = count + 1 WHERE board_uid = #{param0};
	</update>
	
	<!-- 커뮤니티 글 전체 리스트 -->
	<select id="selectCommunity" resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[
			SELECT mb.board_uid board_uid, mb.subject subject, mm.nickname nickname, 
			mb.regDate regDate, mb.count count, mb.content content, 
			mb.type type, mb.tag tag, (SELECT count(*) FROM mc_like ml WHERE ml.board_uid = mb.board_uid) likeCnt
			FROM mc_board mb , mc_member mm 
			WHERE mb.member_uid = mm.member_uid
			AND mb.type <> "공지"
			ORDER BY board_uid DESC
			LIMIT #{from}, #{pageRows}
		]]>
	</select>
	
	<!-- Type에 따른 리스트 -->
	<select id="selectType" resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[
			SELECT mb.board_uid board_uid, mb.subject subject, mm.nickname nickname, 
			mb.regDate regDate, mb.count count, mb.content content, 
			mb.type type, mb.tag tag, (SELECT count(*) FROM mc_like ml WHERE ml.board_uid = mb.board_uid) likeCnt
			FROM mc_board mb , mc_member mm 
			WHERE mb.member_uid = mm.member_uid
			AND mb.type = #{type}
			ORDER BY board_uid DESC
		]]>
	</select>
	
	<!-- Tag에 따른 리스트 -->
	<select id="selectTag" resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[
			SELECT mb.board_uid board_uid, mb.subject subject, mm.nickname nickname, 
			mb.regDate regDate, mb.count count, mb.content content, 
			mb.type type, mb.tag tag, (SELECT count(*) FROM mc_like ml WHERE ml.board_uid = mb.board_uid) likeCnt 
			FROM mc_board mb , mc_member mm 
			WHERE mb.member_uid = mm.member_uid
			AND mb.tag = #{tag}
			ORDER BY board_uid DESC
		]]>
	</select>
	
	<!-- Type에 따른 리스트 -->
	<select id="selectTypePaging" resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[
			SELECT mb.board_uid board_uid, mb.subject subject, mm.nickname nickname, 
			mb.regDate regDate, mb.count count, mb.content content, 
			mb.type type, mb.tag tag, (SELECT count(*) FROM mc_like ml WHERE ml.board_uid = mb.board_uid) likeCnt
			FROM mc_board mb , mc_member mm 
			WHERE mb.member_uid = mm.member_uid
			AND mb.type = #{type}
			ORDER BY board_uid DESC
			LIMIT #{from}, #{pageRows}
		]]>
	</select>
	
	<!-- Tag에 따른 리스트 -->
	<select id="selectTagPaging" resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[
			SELECT mb.board_uid board_uid, mb.subject subject, mm.nickname nickname, 
			mb.regDate regDate, mb.count count, mb.content content, 
			mb.type type, mb.tag tag, (SELECT count(*) FROM mc_like ml WHERE ml.board_uid = mb.board_uid) likeCnt 
			FROM mc_board mb , mc_member mm 
			WHERE mb.member_uid = mm.member_uid
			AND mb.tag = #{tag}
			ORDER BY board_uid DESC
			LIMIT #{from}, #{pageRows}
		]]>
	</select>
	
	<!-- 커뮤니티 글 전체 리스트 카운트 -->
	<select id="countBoard" resultType="int">
		<![CDATA[
			SELECT count(*) 
			FROM mc_board mb, mc_member mm
			WHERE mb.member_uid = mm.member_uid
			AND mb.type <> "공지"
		]]>
	</select>
	
	<!-- Type 리스트 카운트 -->
	<select id="countType" resultType="int">
		<![CDATA[
			SELECT count(*) 
			FROM mc_board mb, mc_member mm
			WHERE mb.member_uid = mm.member_uid
			AND mb.type = #{type}
		]]>
	</select>
	<!-- Tag 리스트 카운트 -->
	<select id="countTag" resultType="int">
		<![CDATA[
			SELECT count(*) 
			FROM mc_board mb, mc_member mm
			WHERE mb.member_uid = mm.member_uid
			AND mb.tag = #{tag}
		]]>
	</select>
	<!-- 글작성 로그인 연계-->
	<insert id="insert" flushCache="true" parameterType="com.lec.spring.domain.board.BoardDTO"
	keyProperty="board_uid" keyColumn="board_uid" useGeneratedKeys="true">
		INSERT INTO mc_board (type, subject, tag, content, member_uid)
		VALUES (#{type}, #{subject}, #{tag, jdbcType=VARCHAR}, #{content}, #{member_uid})
	</insert>
	
	<!-- 글삭제 -->
	<delete id="deleteUid" flushCache="true">
		DELETE FROM mc_board WHERE board_uid = #{board_uid}
	</delete>

	
	<!-- 글 수정 -->
	<update id="update" flushCache="true" parameterType="com.lec.spring.domain.board.BoardDTO">
		UPDATE mc_board SET type = #{type}, tag = #{tag, jdbcType=VARCHAR}, subject = #{subject}, content = #{content}
		WHERE board_uid = #{board_uid}
	</update>
	
	<!-- 추천 하기 -->
	<insert id="likeUp" flushCache="true">
		INSERT INTO mc_like (board_uid, member_uid)
		SELECT #{board_uid}, #{member_uid} FROM DUAL
		WHERE NOT EXISTS (SELECT board_uid FROM mc_like WHERE board_uid = #{board_uid} AND member_uid = #{member_uid})
	</insert>
	
	<!-- 추천 취소 -->
	<delete id="likeDown" flushCache="true">
		DELETE FROM mc_like 
		WHERE board_uid = #{board_uid} AND member_uid = #{member_uid}
	</delete>
	
	<!-- 추천수 카운트 -->
	<select id="likeCount" resultType="int">
		SELECT count(member_uid) FROM mc_like WHERE board_uid=#{board_uid}
	</select>
	
	<!-- 추천여부 확인 -->
	<select id="likeChk" resultType="int">
		SELECT count(*) FROM mc_like WHERE board_uid = #{board_uid} AND member_uid = #{member_uid}
	</select>
	
	<!-- 신고 -->
	<insert id="report" flushCache="true" parameterType="hashMap"
	keyProperty="report_uid" keyColumn="report_uid" useGeneratedKeys="true">
		INSERT INTO mc_report (board_uid, report_tag, report_content, member_uid)
		VALUES (#{board_uid}, #{report_tag}, #{report_content}, #{member_uid})
	</insert>
	

	<!-- ↓ 해연 추가 -->
	
	<!-- 공지사항 정보 : selectNotice-->
	
	<!-- 공지사항 카운트 -->
	<select id="countNtc" resultType="int">
		SELECT count(*) 
		FROM mc_board mb, mc_member mm
		WHERE mb.member_uid = mm.member_uid
		AND mb.type = "공지"
	</select>
	
	<!-- 글 목록 (페이징) selectFromRow -->
	<select id="selectFromRowNtc"
		resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[    
		SELECT
			mb.board_uid board_uid, 
			mb.subject subject,
			mm.nickname nickname, 
			mb.regDate regDate
		FROM mc_board mb , mc_member mm
		WHERE mb.member_uid = mm.member_uid
		AND mb.type = "공지"
			ORDER BY board_uid DESC
		LIMIT #{from}, #{pageRows}
		]]>
	</select>
	
	<!-- 공지사항 정보 삭제 체크된 것 여러개-->
	<delete id="deleteByChk" flushCache="true"
 	 	parameterType="java.util.ArrayList">
 	 	DELETE FROM mc_board
 	 	WHERE mm.member_uid in (
 	 		<foreach collection="array" item="item" index="index" separator=",">
 	 			${item}
 	 		</foreach>
 	 	) 	 
 	 </delete>
	
	<!-- 공지사항 작성하기, 정보를 DB에 저장한다 -->
	<insert id="insertNtc" flushCache="true">
		INSERT INTO mc_board mb, mc_member mm
		AND mb.type = "공지"
			(mb.subject, mb.content, mb.nickname)
		VALUES
			(#{subject}, #{content}, #{nickname})	
	</insert>
	
	<!-- 공지사항 보기 -->
	
	
	
	<!-- 게시판 정보를 가져온다 : selectCommunity-->
	
	<!-- 커뮤니티 게시판 글의 개수를 카운트해서 가져온다 -->
	<select id="countAll" resultType="int">
		<![CDATA[
		SELECT count(*) 
		FROM mc_board mb, mc_member mm
		WHERE mb.member_uid = mm.member_uid
		AND mb.type <> "공지"
		]]>
	</select>
	
	<!-- 커뮤티니 게시판 정보를 from 부터 pageRows 개를 가져온다 -->
	<select id="selectFromRowCmt"
		resultType="com.lec.spring.domain.board.BoardDTO">
		<![CDATA[    
		SELECT 
			mb.board_uid board_uid, 
			mb.subject subject, 
			mm.nickname nickname, 
			mb.regDate regDate, 
			mb.content content, 
			mb.type type, mb.tag tag 
		FROM mc_board mb , mc_member mm 
		WHERE mb.member_uid = mm.member_uid
		AND mb.type <> "공지"
			ORDER BY board_uid DESC
		LIMIT #{from}, #{pageRows}
		]]>
	</select>
	
	<!-- 정보 게시판 리스트 가져오기 : selectInfo -->
	<!-- 정보게시판 페이징 -->
	<!-- 자유 게시판 리스트 가져오기 : selectFree-->
	<!-- 자유게시판 페이징 -->
	
	<!-- 게시글을 삭제한다 : deleteUid -->
	<!-- 체크된 게시글 삭제 ? -->
	<!-- 게시글을 본다 -->
	
	
	
	<!-- Coin List 가져오기 -->
	<select id="selectCoinList" resultType="com.lec.spring.domain.coin.CoinDTO">
		SELECT 
			coin_uid, bithumb_name, upbit_name, coinone_name, korbit_name
		FROM 
			mc_coin
	
	</select>

</mapper>